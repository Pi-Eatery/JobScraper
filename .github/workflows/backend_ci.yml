name: Backend CI

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
  pull_request:
    branches:
      - main
    paths:
      - 'backend/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Poetry
        run: pip install poetry
      - name: Generate poetry.lock
        working-directory: ./backend
        run: poetry lock
      - name: Install dependencies
        working-directory: ./backend
        run: poetry install
      - name: Explicitly install pydantic and pydantic-core with pip
        working-directory: ./backend
        run: poetry run pip install "pydantic==2.11.9" "pydantic-core==2.33.2"
      - name: Diagnose pydantic-core
        working-directory: ./backend
        run: |
          poetry run python -c "import pydantic_core; print(f'pydantic_core version: {pydantic_core.__version__}'); from pydantic_core import _pydantic_core; print('Successfully imported _pydantic_core')"
      - name: Lint with Black
        working-directory: ./backend
        run: poetry run black --check src/
      - name: Lint with Bandit
        working-directory: ./backend
        run: poetry run bandit -r src
      - name: Test with Pytest
        working-directory: ./backend
        run: poetry run pytest
        env:
          PYTHONPATH: ./
      # - name: Build Docker image (for Scout Scan)
      #   working-directory: ./backend
      #   run: docker build -t backend-image .
      # - name: Docker Scout Scan
      #   run: |
      #     docker scout cves backend-image
      - name: Run pip-audit
        working-directory: ./backend
        run: |
          pip install pip-audit poetry-plugin-export
          poetry export -f requirements.txt --output requirements.txt --without-hashes --dev
          pip-audit -r requirements.txt